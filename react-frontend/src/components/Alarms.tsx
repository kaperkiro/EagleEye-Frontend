import { useState, useEffect } from "react";
import { FloorPlanStaticObjects } from "./AlarmObj.tsx";
import "../css/Alarms.css";

// A simple point in percentage relative to the floor plan.
type Point = {
  x: number;
  y: number;
};

// Updated AlarmZone with a unique ID generated by the backend.
type AlarmZone = {
  id: string;
  topLeft: Point;
  bottomRight: Point;
  active: boolean;
  triggered: boolean;
};

// Set this to match your backend host and port.
const BACKEND_URL = "http://localhost:5001";

export const LarmData = () => {
  // Mode control: 0 - Add Zone, 1 - Remove Zone, 2 - Zone Status
  const [activeIndexLB, setActiveIndex] = useState(0);
  // The starting point for a new zone.
  const [zoneStart, setZoneStart] = useState<Point | null>(null);
  // A draft zone drawn while moving the mouse. Note: Excludes the id.
  const [draftZone, setDraftZone] = useState<Omit<AlarmZone, "id"> | null>(
    null
  );
  // List of finalized alarm zones that include their ID.
  const [alarms, setAlarms] = useState<AlarmZone[]>([]);

  // Fetch existing alarm zones from the backend when the component mounts.
  useEffect(() => {
    fetch(`${BACKEND_URL}/api/alarms`)
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to fetch alarms from backend");
        }
        return response.json();
      })
      .then((data) => {
        if (data.alarms) {
          setAlarms(data.alarms);
          console.log("Loaded alarms from backend:", data.alarms);
        }
      })
      .catch((error) => {
        console.error("Error fetching alarms:", error);
      });
  }, []);

  // Handle switching modes. If leaving Add Zone mode, clear drawing state.
  const handleButtonClick = (index: number) => {
    setActiveIndex(index);
    if (index !== 0) {
      setZoneStart(null);
      setDraftZone(null);
    }
  };

  // Compute an AlarmZone from two points without generating an ID.
  const calculateAlarmZone = (p1: Point, p2: Point): Omit<AlarmZone, "id"> => {
    const topLeft = { x: Math.min(p1.x, p2.x), y: Math.min(p1.y, p2.y) };
    const bottomRight = { x: Math.max(p1.x, p2.x), y: Math.max(p1.y, p2.y) };
    return { topLeft, bottomRight, active: true, triggered: false };
  };

  const changeAlarmStatus = (id: string) => {
    fetch(`${BACKEND_URL}/api/alarms/status/${id}`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to update alarm");
        }
        return response.json();
      })
      .then((result) => {
        console.log("Backend response:", result); // Likely just a message
        // Toggle the 'active' property locally
        setAlarms((prevAlarms) =>
          prevAlarms.map((alarm) =>
            alarm.id === id ? { ...alarm, active: !alarm.active } : alarm
          )
        );
      })
      .catch((error) => {
        console.error("Error updating alarm:", error);
      });
  };

  // Save a new alarm zone via a POST call to the backend.
  // Notice that we send an object without an id.
  const saveAlarmZone = (newAlarm: Omit<AlarmZone, "id">) => {
    fetch(`${BACKEND_URL}/api/alarms`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(newAlarm),
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to save alarm zone");
        }
        return response.json();
      })
      .then((data) => {
        if (data.alarm) {
          // The returned alarm now includes a generated id.
          setAlarms((prev) => [...prev, data.alarm]);
          console.log("Saved new alarm zone:", data.alarm);
        }
      })
      .catch((error) => {
        console.error("Error saving alarm zone:", error);
      });
  };

  // Remove an alarm zone via a DELETE call to the backend.
  // The endpoint uses the unique id in the URL.
  const handleRemoveZone = (id: string) => {
    fetch(`${BACKEND_URL}/api/alarms/${id}`, {
      method: "DELETE",
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to remove alarm zone");
        }
        return response.json();
      })
      .then(() => {
        console.log("Removed alarm zone with id:", id);
        // Remove the alarm from the state based on its id.
        setAlarms((prev) => prev.filter((alarm) => alarm.id !== id));
      })
      .catch((error) => {
        console.error("Error removing alarm zone:", error);
      });
  };

  // Handle left-click events. In Add Zone mode, use the first click as the start and
  // the second as the end point to finalize an alarm zone.
  const handleMouseClick = (
    event: React.MouseEvent<HTMLDivElement, MouseEvent>
  ) => {
    if (activeIndexLB !== 0) return; // Only in Add Zone mode

    const containerRect = event.currentTarget.getBoundingClientRect();
    const clickX = event.clientX - containerRect.left;
    const clickY = event.clientY - containerRect.top;
    const percentX = (clickX / containerRect.width) * 100;
    const percentY = (clickY / containerRect.height) * 100;
    const clickPoint: Point = { x: percentX, y: percentY };

    if (!zoneStart) {
      // First click: store the starting point.
      setZoneStart(clickPoint);
    } else {
      // Second click: finalize the alarm zone.
      const finalizedZone = calculateAlarmZone(zoneStart, clickPoint);
      // Save the zone to the backend. The backend generates the id.
      saveAlarmZone(finalizedZone);
      // Reset drawing state.
      setZoneStart(null);
      setDraftZone(null);
    }
  };

  // Update the draft zone dynamically as the mouse moves.
  const handleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {
    if (activeIndexLB !== 0 || !zoneStart) return;

    const containerRect = event.currentTarget.getBoundingClientRect();
    const mouseX = event.clientX - containerRect.left;
    const mouseY = event.clientY - containerRect.top;
    const percentX = (mouseX / containerRect.width) * 100;
    const percentY = (mouseY / containerRect.height) * 100;
    const currentPoint: Point = { x: percentX, y: percentY };

    // Update draft zone without the id.
    const currentZone = calculateAlarmZone(zoneStart, currentPoint);
    setDraftZone(currentZone);
  };

  // Right-click cancels the current draft.
  const handleContextMenu = (event: React.MouseEvent<HTMLDivElement>) => {
    if (activeIndexLB === 0 && zoneStart) {
      event.preventDefault();
      setZoneStart(null);
      setDraftZone(null);
    }
  };

  return (
    <div className="alarmsDiv">
      <div className="alarmLeftSidebar">
        <button
          className={`alarmButton ${activeIndexLB === 0 ? "active" : ""}`}
          onClick={() => handleButtonClick(0)}
        >
          Add Zone
        </button>
        <button
          className={`alarmButton ${activeIndexLB === 1 ? "active" : ""}`}
          onClick={() => handleButtonClick(1)}
        >
          Remove Zone
        </button>
        <button
          className={`alarmButton ${activeIndexLB === 2 ? "active" : ""}`}
          onClick={() => handleButtonClick(2)}
        >
          Zone Status
        </button>
      </div>
      <div className="mapDiv">
        <div
          className="mapDiv2"
          style={{ position: "relative" }}
          onClick={handleMouseClick}
          onMouseMove={handleMouseMove}
          onContextMenu={handleContextMenu}
        >
          <FloorPlanStaticObjects />

          {/* Render a draft zone while drawing */}
          {draftZone && (
            <div
              style={{
                position: "absolute",
                left: `${draftZone.topLeft.x}%`,
                top: `${draftZone.topLeft.y}%`,
                width: `${draftZone.bottomRight.x - draftZone.topLeft.x}%`,
                height: `${draftZone.bottomRight.y - draftZone.topLeft.y}%`,
                backgroundColor: "rgba(144,238,144,0.5)",
                pointerEvents: "none",
                border: "2px dashed green",
              }}
            />
          )}
          {/* Render all saved alarm zones */}
          {alarms.map((zone) => (
            <div
              key={zone.id}
              // In Remove Zone mode, clicking a zone triggers deletion.
              onClick={
                activeIndexLB === 1 || activeIndexLB === 2
                  ? (e) => {
                      e.stopPropagation();
                      if (activeIndexLB === 1) {
                        handleRemoveZone(zone.id);
                      } else if (activeIndexLB === 2) {
                        changeAlarmStatus(zone.id);
                      }
                    }
                  : undefined
              }
              style={{
                position: "absolute",
                left: `${zone.topLeft.x}%`,
                top: `${zone.topLeft.y}%`,
                width: `${zone.bottomRight.x - zone.topLeft.x}%`,
                height: `${zone.bottomRight.y - zone.topLeft.y}%`,
                backgroundColor:
                  zone.active === true
                    ? "rgba(144,238,144,0.5)"
                    : "rgb(105,105,105, 0.5)",
                pointerEvents:
                  activeIndexLB === 1 || activeIndexLB === 2 ? "auto" : "none",
                border:
                  zone.active === true ? "2px dashed green" : "2px dashed gray",
              }}
            />
          ))}
        </div>
      </div>
    </div>
  );
};

export default LarmData;
